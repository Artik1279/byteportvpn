import telebot
from telebot import types
import json
import os
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
import threading
import logging
from server import run_flask
threading.Thread(target=run_flask, daemon=True).start()
import os
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = telebot.TeleBot(BOT_TOKEN)

# –í–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
free_period = True

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = 'users.json'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
users_data = {}
try:
    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        users_data = json.load(f)
except (FileNotFoundError, json.JSONDecodeError) as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ {USERS_FILE}: {e}")
    users_data = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def save_users_data():
    try:
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª {USERS_FILE}: {e}")

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ order_data
order_lock = threading.Lock()
order_data = {}  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞

def get_user_data(user_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç,
    –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ (expired = True, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞).
    """
    user_id_str = str(user_id)
    if user_id_str not in users_data:
        users_data[user_id_str] = {
            "subscription_end": "",
            "tariff": "",
            "key": "",
            "address": "",
            "expired": True,
            "free_period_used": False
        }
        save_users_data()
    user = users_data[user_id_str]
    if user["subscription_end"]:
        try:
            sub_end = datetime.strptime(user["subscription_end"], "%Y-%m-%d")
            user["expired"] = sub_end < datetime.now()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            user["expired"] = True
    else:
        user["expired"] = True
    save_users_data()
    return user

def update_user_subscription(user_id, period_months, devices, price):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.
    –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è –≤—Ä–µ–º–µ–Ω–∏.
    –¢–∞—Ä–∏—Ñ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.
    """
    user = get_user_data(user_id)
    current_time = datetime.now()
    if user["subscription_end"]:
        try:
            sub_end = datetime.strptime(user["subscription_end"], "%Y-%m-%d")
            base_time = sub_end if sub_end > current_time else current_time
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            base_time = current_time
    else:
        base_time = current_time

    new_end = base_time + relativedelta(months=period_months)

    user["subscription_end"] = new_end.strftime("%Y-%m-%d")
    user["tariff"] = {
        "months": period_months,
        "devices": devices,
        "price": price
    }
    user["key"] = "DUMMY_KEY_123456"  # –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
    user["address"] = "vpn.example.com"
    user["expired"] = False
    save_users_data()

def update_user_subscription_free(user_id, free_trial_days):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
    """
    user = get_user_data(user_id)
    current_time = datetime.now()
    if user["subscription_end"]:
        try:
            sub_end = datetime.strptime(user["subscription_end"], "%Y-%m-%d")
            base_time = sub_end if sub_end > current_time else current_time
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            base_time = current_time
    else:
        base_time = current_time
    new_end = base_time + timedelta(days=free_trial_days)
    user["subscription_end"] = new_end.strftime("%Y-%m-%d")
    user["tariff"] = {"trial": True, "days": free_trial_days, "price": 0}
    user["key"] = "DUMMY_KEY_123456"  # –í –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
    user["address"] = "vpn.example.com"
    user["expired"] = False
    user["free_period_used"] = True
    save_users_data()

def get_main_menu(user_first_name, user_id):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ.
    """
    user_data = get_user_data(user_id)
    trial_message = ""
    
    if free_period and not user_data["free_period_used"]:
        trial_message = "\nüéÅ –ö–∞–∫ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π.\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ –µ–≥–æ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.\n"

    text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}! üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BytePortVPN!

–ü–æ–¥–∫–ª—é—á–∞–π—Å—è –∏ –∑–∞–±—É–¥—å –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º! üîó
{trial_message}
üéπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    markup = types.InlineKeyboardMarkup()
    btn_buy = types.InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å", callback_data="buy")
    btn_profile = types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    btn_info = types.InlineKeyboardButton("üìë –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–µ–º VPN", callback_data="info")
    btn_install = types.InlineKeyboardButton("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="install")
    markup.add(btn_buy, btn_profile, btn_install)
    btn_tkg = types.InlineKeyboardButton("üìú –¢–ì–ö (–û—Ç–∑—ã–≤—ã, –ù–æ–≤–æ—Å—Ç–∏)", url="http://example.com/tkg")
    btn_support = types.InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="http://example.com/support")
    markup.add(btn_info, btn_tkg, btn_support)
    return text, markup

@bot.message_handler(commands=['start'])
def start(message):
    user_first_name = message.from_user.first_name
    user_id = message.from_user.id
    text, markup = get_main_menu(user_first_name, user_id)
    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "back_main")
def handle_back_main(call):
    user_first_name = call.from_user.first_name
    user_id = call.from_user.id
    text, markup = get_main_menu(user_first_name, user_id)
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

# –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö callback_data
valid_callbacks = [
    "buy", "profile", "info", "install", "back_main",
    "period_1", "period_3", "period_6", "period_free",
    "devices_1", "devices_3", "devices_5", "pay",
    "back_buy", "back_devices"
]

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å callback_data
    if call.data not in valid_callbacks:
        bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {call.data}")
        return

    if call.data == "info":
        text = """
üìë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ BytePortVPN\n\nüöÄ **–ë—ã—Å—Ç—Ä—ã–π. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π. –°—Ç–∞–±–∏–ª—å–Ω—ã–π.**
BytePortVPN ‚Äî –≠—Ç–æ —Ç–≤–æ–π –ø—Ä–æ–ø—É—Å–∫ –≤ —Å–≤–æ–±–æ–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç. –ù–∏–∫–∞–∫–∏—Ö –ª–∞–≥–æ–≤, –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–ø—Ä–µ—Ç–æ–≤.

üîí *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å* ‚Äî –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –∑–∞–º–∫–æ–º, –º—ã –¥–∞–∂–µ –Ω–µ –≤–µ–¥—ë–º –ª–æ–≥–æ–≤.
‚ö° *–°–∫–æ—Ä–æ—Å—Ç—å* ‚Äî –°—Ç—Ä–∏–º—ã, –∏–≥—Ä—ã, –≤–∏–¥–µ–æ, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏.
üåç *–î–æ—Å—Ç—É–ø* ‚Äî –ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞, –∫–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –≤—Å–µ–≥–¥–∞!
üí∞ *–¶–µ–Ω–∞* ‚Äî –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–∂–¥–æ–º—É. –í—Å–µ–≥–æ *100—Ä—É–±./–º–µ—Å.* - —Å–µ–π—á–∞—Å, —ç—Ç–æ –Ω–µ –¥–µ–Ω—å–≥–∏.
üåê *–ü–æ–¥–¥–µ—Ä–∂–∫–∞* ‚Äî –ú—ã –Ω–∞ —Å–≤—è–∑–∏.

–ü—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∞–π—Å—è –∏ –∑–∞–±—É–¥—å –æ –≥—Ä–∞–Ω–∏—Ü–∞—Ö. *–°–≤–æ–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥–æ–º—É!* üöÄüîó
"""
        markup = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")
        btn_buy = types.InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å", callback_data="buy")
        markup.add(btn_back, btn_buy)
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=markup, parse_mode="markdown")

    elif call.data == "buy":
        text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n(‚ú≥ –ß–µ–º –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–µ–≤ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ, —Ç–µ–º –¥–µ—à–µ–≤–ª–µ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ —Å—É–º–º–µ)\n–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ - 100—Ä—É–±."
        markup = types.InlineKeyboardMarkup()
        btn_1 = types.InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data="period_1")
        btn_3 = types.InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ (-5%)", callback_data="period_3")
        btn_6 = types.InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ (-10%)", callback_data="period_6")
        markup.add(btn_1, btn_3)
        markup.add(btn_6)
        user_data = get_user_data(user_id)
        if free_period and not user_data.get("free_period_used", False):
            btn_free = types.InlineKeyboardButton("üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (7 –¥–Ω–µ–π) [–ë–ï–°–ü–õ–ê–¢–ù–û]", callback_data="period_free")
            markup.add(btn_free)
        btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")
        markup.add(btn_back)
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=markup)

    elif call.data in ["period_1", "period_3", "period_6", "period_free"]:
        if call.data == "period_free":
            free_trial_duration = 7  # 7 –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            update_user_subscription_free(user_id, free_trial_duration)
            user = get_user_data(user_id)
            text = (f"‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                    f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user['subscription_end']}\n"
                    f"–ö–ª—é—á: {user['key']}\n"
                    f"–ê–¥—Ä–µ—Å: {user['address']}"
                    "\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ VPN!")
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")
            btn_install = types.InlineKeyboardButton("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="install")
            markup.add(btn_back, btn_install)
            bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=markup)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        else:
            period = int(call.data.split("_")[1])
            discount = 0
            if period == 3:
                discount = 0.05
            elif period == 6:
                discount = 0.10
            with order_lock:
                order_data[user_id] = {"period": period, "discount": discount}
            text = "üì± –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
            markup = types.InlineKeyboardMarkup()
            btn_1dev = types.InlineKeyboardButton("1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="devices_1")
            btn_3dev = types.InlineKeyboardButton("3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="devices_3")
            btn_5dev = types.InlineKeyboardButton("5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤", callback_data="devices_5")
            btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_buy")
            markup.add(btn_1dev, btn_3dev, btn_5dev)
            markup.add(btn_back)
            bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=markup)

    elif call.data in ["devices_1", "devices_3", "devices_5"]:
        devices = int(call.data.split("_")[1])
        with order_lock:
            if user_id not in order_data:
                order_data[user_id] = {}
            order_data[user_id].update({
                "devices": devices,
                "period": order_data.get(user_id, {}).get("period", 1),
                "discount": order_data.get(user_id, {}).get("discount", 0)
            })
            base_price = 100
            total_price = base_price * order_data[user_id]["period"] * devices
            total_price = int(total_price * (1 - order_data[user_id]["discount"]))
            order_data[user_id]["price"] = total_price

        text = (
            f"üí∞ –ò—Ç–æ–≥–æ: {total_price} —Ä—É–±.\n\n"
            f"*–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ:*\n"
            f"- –ü–µ—Ä–∏–æ–¥: {order_data[user_id]['period']} –º–µ—Å—è—Ü(–µ–≤)\n"
            f"- –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {devices}\n"
            f"- –¶–µ–Ω–∞: {total_price} —Ä—É–±.\n\n"
            "‚¨á –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ –æ–ø–ª–∞—Ç–µ."
        )
        markup = types.InlineKeyboardMarkup()
        btn_pay = types.InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")
        btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_devices")
        markup.add(btn_pay)
        markup.add(btn_back)
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=markup, parse_mode="markdown")

    elif call.data == "pay":
        with order_lock:
            if user_id in order_data:
                period = order_data[user_id].get("period", 1)
                devices = order_data[user_id].get("devices", 1)
                price = order_data[user_id].get("price", 100)
                update_user_subscription(user_id, period, devices, price)
                text = (
                    f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ: {users_data[str(user_id)]['subscription_end']}\n"
                    f"üîë –ö–ª—é—á: {users_data[str(user_id)]['key']}\n"
                    f"üåê –ê–¥—Ä–µ—Å: {users_data[str(user_id)]['address']}\n\n"
                    "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ VPN!"
                )
                markup = types.InlineKeyboardMarkup()
                btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")
                btn_install = types.InlineKeyboardButton("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="install")
                markup.add(btn_back, btn_install)
                bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=markup)
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–≤–µ—Ä—à–∏–ª –æ–ø–ª–∞—Ç—É: {order_data[user_id]}")
                del order_data[user_id]

    elif call.data == "profile":
        user_data = get_user_data(user_id)
        if isinstance(user_data.get("tariff"), dict):
            tariff = user_data["tariff"]
            if tariff.get("trial"):
                tariff_text = f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {tariff.get('days', 'N/A')} –¥–Ω–µ–π, {tariff.get('price', 'N/A')} —Ä—É–±."
            else:
                tariff_text = f"{tariff.get('months', 'N/A')} –º–µ—Å—è—Ü(–µ–≤), {tariff.get('devices', 'N/A')} —É—Å—Ç—Ä–æ–π—Å—Ç–≤, {tariff.get('price', 'N/A')} —Ä—É–±."
        else:
            tariff_text = user_data.get("tariff", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        text = (f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID-{user_id}:\n\n"
                f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user_data['subscription_end'] or '–ù–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞'}\n"
                f"üìù –¢–∞—Ä–∏—Ñ: {tariff_text}\n\n"
                f"üîë –ö–ª—é—á: {user_data['key'] or '–ù–µ—Ç'}\n"
                f"üåê –ê–¥—Ä–µ—Å: {user_data['address'] or '–ù–µ—Ç'}")
        if user_data.get("expired", True):
            text += "\n\n‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ, –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        markup = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")
        markup.add(btn_back)
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=markup)

    elif call.data == "install":
        text = ("üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∫ VPN:\n\n"
                "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–æ–∫—Å–∏-–∫–ª–∏–µ–Ω—Ç WireGuard.\n"
                "2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç—É–Ω–Ω–µ–ª—å —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\n"
                "3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Ç—É–Ω–Ω–µ–ª—é –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º!\n\n"
                "üí° –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        markup = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")
        btn_support = types.InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="http://example.com/support")
        markup.add(btn_back, btn_support)
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=markup)

    elif call.data == "back_buy":
        text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n(‚ú≥ –ß–µ–º –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–µ–≤ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ, —Ç–µ–º –¥–µ—à–µ–≤–ª–µ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ —Å—É–º–º–µ)"
        markup = types.InlineKeyboardMarkup()
        btn_1 = types.InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data="period_1")
        btn_3 = types.InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ (-5%)", callback_data="period_3")
        btn_6 = types.InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ (-10%)", callback_data="period_6")
        markup.add(btn_1, btn_3, btn_6)
        user_data = get_user_data(user_id)
        if free_period and not user_data.get("free_period_used", False):
            btn_free = types.InlineKeyboardButton("üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (7 –¥–Ω–µ–π) [–ë–ï–°–ü–õ–ê–¢–ù–û]", callback_data="period_free")
            markup.add(btn_free)
        btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")
        markup.add(btn_back)
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=markup)

    elif call.data == "back_devices":
        text = "üì± –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
        markup = types.InlineKeyboardMarkup()
        btn_1dev = types.InlineKeyboardButton("1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data="devices_1")
        btn_3dev = types.InlineKeyboardButton("3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="devices_3")
        btn_5dev = types.InlineKeyboardButton("5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤", callback_data="devices_5")
        btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_buy")
        markup.add(btn_1dev, btn_3dev, btn_5dev)
        markup.add(btn_back)
        bot.edit_message_text(text, chat_id, call.message.message_id, reply_markup=markup)

    bot.answer_callback_query(call.id)

if __name__ == '__main__':
    bot.polling(none_stop=True)
